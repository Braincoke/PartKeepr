<?php

use Symfony\Component\DependencyInjection\Argument\RewindableGenerator;

// This file has been auto-generated by the Symfony Dependency Injection Component for internal use.
// Returns the public 'doctrine.dbal.default_connection' shared service.

$a = new \Doctrine\DBAL\Configuration();

$b = new \Doctrine\DBAL\Logging\LoggerChain();
$b->addLogger(new \Symfony\Bridge\Doctrine\Logger\DbalLogger(${($_ = isset($this->services['monolog.logger.doctrine']) ? $this->services['monolog.logger.doctrine'] : $this->load('getMonolog_Logger_DoctrineService.php')) && false ?: '_'}, ${($_ = isset($this->services['debug.stopwatch']) ? $this->services['debug.stopwatch'] : ($this->services['debug.stopwatch'] = new \Symfony\Component\Stopwatch\Stopwatch(true))) && false ?: '_'}));
$b->addLogger(${($_ = isset($this->services['doctrine.dbal.logger.profiling.default']) ? $this->services['doctrine.dbal.logger.profiling.default'] : ($this->services['doctrine.dbal.logger.profiling.default'] = new \Doctrine\DBAL\Logging\DebugStack())) && false ?: '_'});

$a->setSQLLogger($b);
$c = new \Symfony\Bridge\Doctrine\ContainerAwareEventManager($this);

$d = new \Gedmo\Tree\TreeListener();
$d->setAnnotationReader(${($_ = isset($this->services['annotation_reader']) ? $this->services['annotation_reader'] : $this->getAnnotationReaderService()) && false ?: '_'});

$c->addEventSubscriber(new \FOS\UserBundle\Doctrine\UserListener(${($_ = isset($this->services['fos_user.util.password_updater']) ? $this->services['fos_user.util.password_updater'] : $this->load('getFosUser_Util_PasswordUpdaterService.php')) && false ?: '_'}, ${($_ = isset($this->services['fos_user.util.canonical_fields_updater']) ? $this->services['fos_user.util.canonical_fields_updater'] : $this->getFosUser_Util_CanonicalFieldsUpdaterService()) && false ?: '_'}));
$c->addEventSubscriber($d);
$c->addEventListener([0 => 'postLoad'], ${($_ = isset($this->services['part_image_listener']) ? $this->services['part_image_listener'] : $this->load('getPartImageListenerService.php')) && false ?: '_'});
$c->addEventListener([0 => 'onFlush'], ${($_ = isset($this->services['footprint.category_path_listener']) ? $this->services['footprint.category_path_listener'] : ($this->services['footprint.category_path_listener'] = new \PartKeepr\FootprintBundle\Listeners\CategoryPathListener($this))) && false ?: '_'});
$c->addEventListener([0 => 'onFlush'], ${($_ = isset($this->services['storage_location.category_path_listener']) ? $this->services['storage_location.category_path_listener'] : ($this->services['storage_location.category_path_listener'] = new \PartKeepr\StorageLocationBundle\Listeners\CategoryPathListener($this))) && false ?: '_'});
$c->addEventListener([0 => 'onFlush'], ${($_ = isset($this->services['part.category_path_listener']) ? $this->services['part.category_path_listener'] : ($this->services['part.category_path_listener'] = new \PartKeepr\PartBundle\Listeners\CategoryPathListener($this))) && false ?: '_'});
$c->addEventListener([0 => 'onFlush'], ${($_ = isset($this->services['part.stock_level_listener']) ? $this->services['part.stock_level_listener'] : ($this->services['part.stock_level_listener'] = new \PartKeepr\PartBundle\Listeners\StockLevelListener($this))) && false ?: '_'});
$c->addEventListener([0 => 'onFlush'], ${($_ = isset($this->services['footprint_category.root_category_listener']) ? $this->services['footprint_category.root_category_listener'] : ($this->services['footprint_category.root_category_listener'] = new \PartKeepr\CategoryBundle\EventListener\RootCategoryListener($this, 'partkeepr.footprint.category_service'))) && false ?: '_'});
$c->addEventListener([0 => 'onFlush'], ${($_ = isset($this->services['part_category.root_category_listener']) ? $this->services['part_category.root_category_listener'] : ($this->services['part_category.root_category_listener'] = new \PartKeepr\CategoryBundle\EventListener\RootCategoryListener($this, 'partkeepr.part.category_service'))) && false ?: '_'});
$c->addEventListener([0 => 'onFlush'], ${($_ = isset($this->services['storage_location_category.root_category_listener']) ? $this->services['storage_location_category.root_category_listener'] : ($this->services['storage_location_category.root_category_listener'] = new \PartKeepr\CategoryBundle\EventListener\RootCategoryListener($this, 'partkeepr.storage_location.category_service'))) && false ?: '_'});
$c->addEventListener([0 => 'onFlush'], ${($_ = isset($this->services['file_removal_listener']) ? $this->services['file_removal_listener'] : $this->load('getFileRemovalListenerService.php')) && false ?: '_'});
$c->addEventListener([0 => 'loadClassMetadata'], ${($_ = isset($this->services['doctrine.orm.default_listeners.attach_entity_listeners']) ? $this->services['doctrine.orm.default_listeners.attach_entity_listeners'] : ($this->services['doctrine.orm.default_listeners.attach_entity_listeners'] = new \Doctrine\ORM\Tools\AttachEntityListenersListener())) && false ?: '_'});

return $this->services['doctrine.dbal.default_connection'] = ${($_ = isset($this->services['doctrine.dbal.connection_factory']) ? $this->services['doctrine.dbal.connection_factory'] : ($this->services['doctrine.dbal.connection_factory'] = new \Doctrine\Bundle\DoctrineBundle\ConnectionFactory([]))) && false ?: '_'}->createConnection(['driver' => 'pdo_mysql', 'host' => 'db', 'port' => 3306, 'dbname' => 'partkeepr', 'user' => 'partkeepr', 'password' => 'partkeepr', 'charset' => 'UTF8', 'driverOptions' => [], 'serverVersion' => 5.6, 'defaultTableOptions' => []], $a, $c, []);
