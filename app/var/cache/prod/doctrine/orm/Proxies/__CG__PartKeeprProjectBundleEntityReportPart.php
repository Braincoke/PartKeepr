<?php

namespace Proxies\__CG__\PartKeepr\ProjectBundle\Entity;

/**
 * DO NOT EDIT THIS FILE - IT WAS CREATED BY DOCTRINE'S PROXY GENERATOR
 */
class ReportPart extends \PartKeepr\ProjectBundle\Entity\ReportPart implements \Doctrine\ORM\Proxy\Proxy
{
    /**
     * @var \Closure the callback responsible for loading properties in the proxy object. This callback is called with
     *      three parameters, being respectively the proxy object to be initialized, the method that triggered the
     *      initialization process and an array of ordered parameters that were passed to that method.
     *
     * @see \Doctrine\Common\Persistence\Proxy::__setInitializer
     */
    public $__initializer__;

    /**
     * @var \Closure the callback responsible of loading properties that need to be copied in the cloned object
     *
     * @see \Doctrine\Common\Persistence\Proxy::__setCloner
     */
    public $__cloner__;

    /**
     * @var boolean flag indicating if this object was already initialized
     *
     * @see \Doctrine\Common\Persistence\Proxy::__isInitialized
     */
    public $__isInitialized__ = false;

    /**
     * @var array properties to be lazy loaded, with keys being the property
     *            names and values being their default values
     *
     * @see \Doctrine\Common\Persistence\Proxy::__getLazyProperties
     */
    public static $lazyPropertiesDefaults = [];



    /**
     * @param \Closure $initializer
     * @param \Closure $cloner
     */
    public function __construct($initializer = null, $cloner = null)
    {

        $this->__initializer__ = $initializer;
        $this->__cloner__      = $cloner;
    }







    /**
     * 
     * @return array
     */
    public function __sleep()
    {
        if ($this->__isInitialized__) {
            return ['__isInitialized__', '' . "\0" . 'PartKeepr\\ProjectBundle\\Entity\\ReportPart' . "\0" . 'report', '' . "\0" . 'PartKeepr\\ProjectBundle\\Entity\\ReportPart' . "\0" . 'part', '' . "\0" . 'PartKeepr\\ProjectBundle\\Entity\\ReportPart' . "\0" . 'quantity', '' . "\0" . 'PartKeepr\\ProjectBundle\\Entity\\ReportPart' . "\0" . 'distributor', '' . "\0" . 'PartKeepr\\ProjectBundle\\Entity\\ReportPart' . "\0" . 'distributorOrderNumber', '' . "\0" . 'PartKeepr\\ProjectBundle\\Entity\\ReportPart' . "\0" . 'itemPrice', '' . "\0" . 'PartKeepr\\ProjectBundle\\Entity\\ReportPart' . "\0" . 'orderSum', '' . "\0" . 'PartKeepr\\ProjectBundle\\Entity\\ReportPart' . "\0" . 'metaPart', '' . "\0" . 'PartKeepr\\ProjectBundle\\Entity\\ReportPart' . "\0" . 'subParts', '' . "\0" . 'PartKeepr\\ProjectBundle\\Entity\\ReportPart' . "\0" . 'projectParts', '' . "\0" . 'PartKeepr\\ProjectBundle\\Entity\\ReportPart' . "\0" . 'itemSum', '' . "\0" . 'PartKeepr\\ProjectBundle\\Entity\\ReportPart' . "\0" . 'missing'];
        }

        return ['__isInitialized__', '' . "\0" . 'PartKeepr\\ProjectBundle\\Entity\\ReportPart' . "\0" . 'report', '' . "\0" . 'PartKeepr\\ProjectBundle\\Entity\\ReportPart' . "\0" . 'part', '' . "\0" . 'PartKeepr\\ProjectBundle\\Entity\\ReportPart' . "\0" . 'quantity', '' . "\0" . 'PartKeepr\\ProjectBundle\\Entity\\ReportPart' . "\0" . 'distributor', '' . "\0" . 'PartKeepr\\ProjectBundle\\Entity\\ReportPart' . "\0" . 'distributorOrderNumber', '' . "\0" . 'PartKeepr\\ProjectBundle\\Entity\\ReportPart' . "\0" . 'itemPrice', '' . "\0" . 'PartKeepr\\ProjectBundle\\Entity\\ReportPart' . "\0" . 'orderSum', '' . "\0" . 'PartKeepr\\ProjectBundle\\Entity\\ReportPart' . "\0" . 'metaPart', '' . "\0" . 'PartKeepr\\ProjectBundle\\Entity\\ReportPart' . "\0" . 'subParts', '' . "\0" . 'PartKeepr\\ProjectBundle\\Entity\\ReportPart' . "\0" . 'projectParts', '' . "\0" . 'PartKeepr\\ProjectBundle\\Entity\\ReportPart' . "\0" . 'itemSum', '' . "\0" . 'PartKeepr\\ProjectBundle\\Entity\\ReportPart' . "\0" . 'missing'];
    }

    /**
     * 
     */
    public function __wakeup()
    {
        if ( ! $this->__isInitialized__) {
            $this->__initializer__ = function (ReportPart $proxy) {
                $proxy->__setInitializer(null);
                $proxy->__setCloner(null);

                $existingProperties = get_object_vars($proxy);

                foreach ($proxy->__getLazyProperties() as $property => $defaultValue) {
                    if ( ! array_key_exists($property, $existingProperties)) {
                        $proxy->$property = $defaultValue;
                    }
                }
            };

        }
    }

    /**
     * 
     */
    public function __clone()
    {
        $this->__cloner__ && $this->__cloner__->__invoke($this, '__clone', []);
    }

    /**
     * Forces initialization of the proxy
     */
    public function __load()
    {
        $this->__initializer__ && $this->__initializer__->__invoke($this, '__load', []);
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __isInitialized()
    {
        return $this->__isInitialized__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitialized($initialized)
    {
        $this->__isInitialized__ = $initialized;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitializer(\Closure $initializer = null)
    {
        $this->__initializer__ = $initializer;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __getInitializer()
    {
        return $this->__initializer__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setCloner(\Closure $cloner = null)
    {
        $this->__cloner__ = $cloner;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific cloning logic
     */
    public function __getCloner()
    {
        return $this->__cloner__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     * @static
     */
    public function __getLazyProperties()
    {
        return self::$lazyPropertiesDefaults;
    }

    
    /**
     * {@inheritDoc}
     */
    public function getProjectParts()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getProjectParts', []);

        return parent::getProjectParts();
    }

    /**
     * {@inheritDoc}
     */
    public function getSubParts()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getSubParts', []);

        return parent::getSubParts();
    }

    /**
     * {@inheritDoc}
     */
    public function setSubParts($subParts)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setSubParts', [$subParts]);

        return parent::setSubParts($subParts);
    }

    /**
     * {@inheritDoc}
     */
    public function isMetaPart()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'isMetaPart', []);

        return parent::isMetaPart();
    }

    /**
     * {@inheritDoc}
     */
    public function setMetaPart($metaPart)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setMetaPart', [$metaPart]);

        return parent::setMetaPart($metaPart);
    }

    /**
     * {@inheritDoc}
     */
    public function getDistributorOrderNumber()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getDistributorOrderNumber', []);

        return parent::getDistributorOrderNumber();
    }

    /**
     * {@inheritDoc}
     */
    public function setDistributorOrderNumber($distributorOrderNumber)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setDistributorOrderNumber', [$distributorOrderNumber]);

        return parent::setDistributorOrderNumber($distributorOrderNumber);
    }

    /**
     * {@inheritDoc}
     */
    public function getItemPrice()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getItemPrice', []);

        return parent::getItemPrice();
    }

    /**
     * {@inheritDoc}
     */
    public function setItemPrice($itemPrice)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setItemPrice', [$itemPrice]);

        return parent::setItemPrice($itemPrice);
    }

    /**
     * {@inheritDoc}
     */
    public function getOrderSum()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getOrderSum', []);

        return parent::getOrderSum();
    }

    /**
     * {@inheritDoc}
     */
    public function setOrderSum($orderSum)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setOrderSum', [$orderSum]);

        return parent::setOrderSum($orderSum);
    }

    /**
     * {@inheritDoc}
     */
    public function getItemSum()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getItemSum', []);

        return parent::getItemSum();
    }

    /**
     * {@inheritDoc}
     */
    public function setItemSum($itemSum)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setItemSum', [$itemSum]);

        return parent::setItemSum($itemSum);
    }

    /**
     * {@inheritDoc}
     */
    public function getDistributor()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getDistributor', []);

        return parent::getDistributor();
    }

    /**
     * {@inheritDoc}
     */
    public function setDistributor($distributor)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setDistributor', [$distributor]);

        return parent::setDistributor($distributor);
    }

    /**
     * {@inheritDoc}
     */
    public function getMissing()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getMissing', []);

        return parent::getMissing();
    }

    /**
     * {@inheritDoc}
     */
    public function setMissing($missing)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setMissing', [$missing]);

        return parent::setMissing($missing);
    }

    /**
     * {@inheritDoc}
     */
    public function getQuantity()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getQuantity', []);

        return parent::getQuantity();
    }

    /**
     * {@inheritDoc}
     */
    public function setQuantity($quantity)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setQuantity', [$quantity]);

        return parent::setQuantity($quantity);
    }

    /**
     * {@inheritDoc}
     */
    public function getReport()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getReport', []);

        return parent::getReport();
    }

    /**
     * {@inheritDoc}
     */
    public function setReport($report)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setReport', [$report]);

        return parent::setReport($report);
    }

    /**
     * {@inheritDoc}
     */
    public function getPart()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getPart', []);

        return parent::getPart();
    }

    /**
     * {@inheritDoc}
     */
    public function setPart($part)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setPart', [$part]);

        return parent::setPart($part);
    }

    /**
     * {@inheritDoc}
     */
    public function __toString()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, '__toString', []);

        return parent::__toString();
    }

    /**
     * {@inheritDoc}
     */
    public function getId()
    {
        if ($this->__isInitialized__ === false) {
            return (int)  parent::getId();
        }


        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getId', []);

        return parent::getId();
    }

}
