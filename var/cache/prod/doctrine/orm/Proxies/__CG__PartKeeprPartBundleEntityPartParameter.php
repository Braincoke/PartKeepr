<?php

namespace Proxies\__CG__\PartKeepr\PartBundle\Entity;

/**
 * DO NOT EDIT THIS FILE - IT WAS CREATED BY DOCTRINE'S PROXY GENERATOR
 */
class PartParameter extends \PartKeepr\PartBundle\Entity\PartParameter implements \Doctrine\ORM\Proxy\Proxy
{
    /**
     * @var \Closure the callback responsible for loading properties in the proxy object. This callback is called with
     *      three parameters, being respectively the proxy object to be initialized, the method that triggered the
     *      initialization process and an array of ordered parameters that were passed to that method.
     *
     * @see \Doctrine\Common\Persistence\Proxy::__setInitializer
     */
    public $__initializer__;

    /**
     * @var \Closure the callback responsible of loading properties that need to be copied in the cloned object
     *
     * @see \Doctrine\Common\Persistence\Proxy::__setCloner
     */
    public $__cloner__;

    /**
     * @var boolean flag indicating if this object was already initialized
     *
     * @see \Doctrine\Common\Persistence\Proxy::__isInitialized
     */
    public $__isInitialized__ = false;

    /**
     * @var array properties to be lazy loaded, with keys being the property
     *            names and values being their default values
     *
     * @see \Doctrine\Common\Persistence\Proxy::__getLazyProperties
     */
    public static $lazyPropertiesDefaults = [];



    /**
     * @param \Closure $initializer
     * @param \Closure $cloner
     */
    public function __construct($initializer = null, $cloner = null)
    {

        $this->__initializer__ = $initializer;
        $this->__cloner__      = $cloner;
    }







    /**
     * 
     * @return array
     */
    public function __sleep()
    {
        if ($this->__isInitialized__) {
            return ['__isInitialized__', '' . "\0" . 'PartKeepr\\PartBundle\\Entity\\PartParameter' . "\0" . 'part', '' . "\0" . 'PartKeepr\\PartBundle\\Entity\\PartParameter' . "\0" . 'name', '' . "\0" . 'PartKeepr\\PartBundle\\Entity\\PartParameter' . "\0" . 'description', '' . "\0" . 'PartKeepr\\PartBundle\\Entity\\PartParameter' . "\0" . 'unit', '' . "\0" . 'PartKeepr\\PartBundle\\Entity\\PartParameter' . "\0" . 'value', '' . "\0" . 'PartKeepr\\PartBundle\\Entity\\PartParameter' . "\0" . 'normalizedValue', '' . "\0" . 'PartKeepr\\PartBundle\\Entity\\PartParameter' . "\0" . 'maxValue', '' . "\0" . 'PartKeepr\\PartBundle\\Entity\\PartParameter' . "\0" . 'normalizedMaxValue', '' . "\0" . 'PartKeepr\\PartBundle\\Entity\\PartParameter' . "\0" . 'minValue', '' . "\0" . 'PartKeepr\\PartBundle\\Entity\\PartParameter' . "\0" . 'normalizedMinValue', '' . "\0" . 'PartKeepr\\PartBundle\\Entity\\PartParameter' . "\0" . 'stringValue', '' . "\0" . 'PartKeepr\\PartBundle\\Entity\\PartParameter' . "\0" . 'valueType', '' . "\0" . 'PartKeepr\\PartBundle\\Entity\\PartParameter' . "\0" . 'siPrefix', '' . "\0" . 'PartKeepr\\PartBundle\\Entity\\PartParameter' . "\0" . 'minSiPrefix', '' . "\0" . 'PartKeepr\\PartBundle\\Entity\\PartParameter' . "\0" . 'maxSiPrefix'];
        }

        return ['__isInitialized__', '' . "\0" . 'PartKeepr\\PartBundle\\Entity\\PartParameter' . "\0" . 'part', '' . "\0" . 'PartKeepr\\PartBundle\\Entity\\PartParameter' . "\0" . 'name', '' . "\0" . 'PartKeepr\\PartBundle\\Entity\\PartParameter' . "\0" . 'description', '' . "\0" . 'PartKeepr\\PartBundle\\Entity\\PartParameter' . "\0" . 'unit', '' . "\0" . 'PartKeepr\\PartBundle\\Entity\\PartParameter' . "\0" . 'value', '' . "\0" . 'PartKeepr\\PartBundle\\Entity\\PartParameter' . "\0" . 'normalizedValue', '' . "\0" . 'PartKeepr\\PartBundle\\Entity\\PartParameter' . "\0" . 'maxValue', '' . "\0" . 'PartKeepr\\PartBundle\\Entity\\PartParameter' . "\0" . 'normalizedMaxValue', '' . "\0" . 'PartKeepr\\PartBundle\\Entity\\PartParameter' . "\0" . 'minValue', '' . "\0" . 'PartKeepr\\PartBundle\\Entity\\PartParameter' . "\0" . 'normalizedMinValue', '' . "\0" . 'PartKeepr\\PartBundle\\Entity\\PartParameter' . "\0" . 'stringValue', '' . "\0" . 'PartKeepr\\PartBundle\\Entity\\PartParameter' . "\0" . 'valueType', '' . "\0" . 'PartKeepr\\PartBundle\\Entity\\PartParameter' . "\0" . 'siPrefix', '' . "\0" . 'PartKeepr\\PartBundle\\Entity\\PartParameter' . "\0" . 'minSiPrefix', '' . "\0" . 'PartKeepr\\PartBundle\\Entity\\PartParameter' . "\0" . 'maxSiPrefix'];
    }

    /**
     * 
     */
    public function __wakeup()
    {
        if ( ! $this->__isInitialized__) {
            $this->__initializer__ = function (PartParameter $proxy) {
                $proxy->__setInitializer(null);
                $proxy->__setCloner(null);

                $existingProperties = get_object_vars($proxy);

                foreach ($proxy->__getLazyProperties() as $property => $defaultValue) {
                    if ( ! array_key_exists($property, $existingProperties)) {
                        $proxy->$property = $defaultValue;
                    }
                }
            };

        }
    }

    /**
     * 
     */
    public function __clone()
    {
        $this->__cloner__ && $this->__cloner__->__invoke($this, '__clone', []);
    }

    /**
     * Forces initialization of the proxy
     */
    public function __load()
    {
        $this->__initializer__ && $this->__initializer__->__invoke($this, '__load', []);
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __isInitialized()
    {
        return $this->__isInitialized__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitialized($initialized)
    {
        $this->__isInitialized__ = $initialized;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitializer(\Closure $initializer = null)
    {
        $this->__initializer__ = $initializer;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __getInitializer()
    {
        return $this->__initializer__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setCloner(\Closure $cloner = null)
    {
        $this->__cloner__ = $cloner;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific cloning logic
     */
    public function __getCloner()
    {
        return $this->__cloner__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     * @static
     */
    public function __getLazyProperties()
    {
        return self::$lazyPropertiesDefaults;
    }

    
    /**
     * {@inheritDoc}
     */
    public function getNormalizedValue()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getNormalizedValue', []);

        return parent::getNormalizedValue();
    }

    /**
     * {@inheritDoc}
     */
    public function setNormalizedValue($normalizedValue)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setNormalizedValue', [$normalizedValue]);

        return parent::setNormalizedValue($normalizedValue);
    }

    /**
     * {@inheritDoc}
     */
    public function getNormalizedMaxValue()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getNormalizedMaxValue', []);

        return parent::getNormalizedMaxValue();
    }

    /**
     * {@inheritDoc}
     */
    public function setNormalizedMaxValue($normalizedMaxValue)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setNormalizedMaxValue', [$normalizedMaxValue]);

        return parent::setNormalizedMaxValue($normalizedMaxValue);
    }

    /**
     * {@inheritDoc}
     */
    public function getNormalizedMinValue()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getNormalizedMinValue', []);

        return parent::getNormalizedMinValue();
    }

    /**
     * {@inheritDoc}
     */
    public function setNormalizedMinValue($normalizedMinValue)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setNormalizedMinValue', [$normalizedMinValue]);

        return parent::setNormalizedMinValue($normalizedMinValue);
    }

    /**
     * {@inheritDoc}
     */
    public function getStringValue()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getStringValue', []);

        return parent::getStringValue();
    }

    /**
     * {@inheritDoc}
     */
    public function setStringValue($stringValue)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setStringValue', [$stringValue]);

        return parent::setStringValue($stringValue);
    }

    /**
     * {@inheritDoc}
     */
    public function getValueType()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getValueType', []);

        return parent::getValueType();
    }

    /**
     * {@inheritDoc}
     */
    public function setValueType($valueType)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setValueType', [$valueType]);

        return parent::setValueType($valueType);
    }

    /**
     * {@inheritDoc}
     */
    public function getName()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getName', []);

        return parent::getName();
    }

    /**
     * {@inheritDoc}
     */
    public function setName($name)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setName', [$name]);

        return parent::setName($name);
    }

    /**
     * {@inheritDoc}
     */
    public function getDescription()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getDescription', []);

        return parent::getDescription();
    }

    /**
     * {@inheritDoc}
     */
    public function setDescription($description)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setDescription', [$description]);

        return parent::setDescription($description);
    }

    /**
     * {@inheritDoc}
     */
    public function getUnit()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getUnit', []);

        return parent::getUnit();
    }

    /**
     * {@inheritDoc}
     */
    public function setUnit(\PartKeepr\UnitBundle\Entity\Unit $unit = NULL)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setUnit', [$unit]);

        return parent::setUnit($unit);
    }

    /**
     * {@inheritDoc}
     */
    public function getPart()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getPart', []);

        return parent::getPart();
    }

    /**
     * {@inheritDoc}
     */
    public function setPart(\PartKeepr\PartBundle\Entity\Part $part = NULL)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setPart', [$part]);

        return parent::setPart($part);
    }

    /**
     * {@inheritDoc}
     */
    public function getSiPrefix()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getSiPrefix', []);

        return parent::getSiPrefix();
    }

    /**
     * {@inheritDoc}
     */
    public function setSiPrefix(\PartKeepr\SiPrefixBundle\Entity\SiPrefix $prefix = NULL)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setSiPrefix', [$prefix]);

        return parent::setSiPrefix($prefix);
    }

    /**
     * {@inheritDoc}
     */
    public function getValue()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getValue', []);

        return parent::getValue();
    }

    /**
     * {@inheritDoc}
     */
    public function setValue($value)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setValue', [$value]);

        return parent::setValue($value);
    }

    /**
     * {@inheritDoc}
     */
    public function getMinSiPrefix()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getMinSiPrefix', []);

        return parent::getMinSiPrefix();
    }

    /**
     * {@inheritDoc}
     */
    public function setMinSiPrefix($minSiPrefix)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setMinSiPrefix', [$minSiPrefix]);

        return parent::setMinSiPrefix($minSiPrefix);
    }

    /**
     * {@inheritDoc}
     */
    public function getMinValue()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getMinValue', []);

        return parent::getMinValue();
    }

    /**
     * {@inheritDoc}
     */
    public function setMinValue($minValue)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setMinValue', [$minValue]);

        return parent::setMinValue($minValue);
    }

    /**
     * {@inheritDoc}
     */
    public function getMaxSiPrefix()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getMaxSiPrefix', []);

        return parent::getMaxSiPrefix();
    }

    /**
     * {@inheritDoc}
     */
    public function setMaxSiPrefix($maxSiPrefix)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setMaxSiPrefix', [$maxSiPrefix]);

        return parent::setMaxSiPrefix($maxSiPrefix);
    }

    /**
     * {@inheritDoc}
     */
    public function getMaxValue()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getMaxValue', []);

        return parent::getMaxValue();
    }

    /**
     * {@inheritDoc}
     */
    public function setMaxValue($maxValue)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setMaxValue', [$maxValue]);

        return parent::setMaxValue($maxValue);
    }

    /**
     * {@inheritDoc}
     */
    public function getId()
    {
        if ($this->__isInitialized__ === false) {
            return (int)  parent::getId();
        }


        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getId', []);

        return parent::getId();
    }

    /**
     * {@inheritDoc}
     */
    public function __toString()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, '__toString', []);

        return parent::__toString();
    }

}
