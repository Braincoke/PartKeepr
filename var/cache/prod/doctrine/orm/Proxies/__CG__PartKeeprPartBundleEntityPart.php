<?php

namespace Proxies\__CG__\PartKeepr\PartBundle\Entity;

/**
 * DO NOT EDIT THIS FILE - IT WAS CREATED BY DOCTRINE'S PROXY GENERATOR
 */
class Part extends \PartKeepr\PartBundle\Entity\Part implements \Doctrine\ORM\Proxy\Proxy
{
    /**
     * @var \Closure the callback responsible for loading properties in the proxy object. This callback is called with
     *      three parameters, being respectively the proxy object to be initialized, the method that triggered the
     *      initialization process and an array of ordered parameters that were passed to that method.
     *
     * @see \Doctrine\Common\Persistence\Proxy::__setInitializer
     */
    public $__initializer__;

    /**
     * @var \Closure the callback responsible of loading properties that need to be copied in the cloned object
     *
     * @see \Doctrine\Common\Persistence\Proxy::__setCloner
     */
    public $__cloner__;

    /**
     * @var boolean flag indicating if this object was already initialized
     *
     * @see \Doctrine\Common\Persistence\Proxy::__isInitialized
     */
    public $__isInitialized__ = false;

    /**
     * @var array properties to be lazy loaded, with keys being the property
     *            names and values being their default values
     *
     * @see \Doctrine\Common\Persistence\Proxy::__getLazyProperties
     */
    public static $lazyPropertiesDefaults = [];



    /**
     * @param \Closure $initializer
     * @param \Closure $cloner
     */
    public function __construct($initializer = null, $cloner = null)
    {

        $this->__initializer__ = $initializer;
        $this->__cloner__      = $cloner;
    }







    /**
     * 
     * @return array
     */
    public function __sleep()
    {
        if ($this->__isInitialized__) {
            return ['__isInitialized__', '' . "\0" . 'PartKeepr\\PartBundle\\Entity\\Part' . "\0" . 'category', '' . "\0" . 'PartKeepr\\PartBundle\\Entity\\Part' . "\0" . 'name', '' . "\0" . 'PartKeepr\\PartBundle\\Entity\\Part' . "\0" . 'description', '' . "\0" . 'PartKeepr\\PartBundle\\Entity\\Part' . "\0" . 'footprint', '' . "\0" . 'PartKeepr\\PartBundle\\Entity\\Part' . "\0" . 'partUnit', '' . "\0" . 'PartKeepr\\PartBundle\\Entity\\Part' . "\0" . 'storageLocation', '' . "\0" . 'PartKeepr\\PartBundle\\Entity\\Part' . "\0" . 'manufacturers', '' . "\0" . 'PartKeepr\\PartBundle\\Entity\\Part' . "\0" . 'distributors', '' . "\0" . 'PartKeepr\\PartBundle\\Entity\\Part' . "\0" . 'attachments', '' . "\0" . 'PartKeepr\\PartBundle\\Entity\\Part' . "\0" . 'comment', '' . "\0" . 'PartKeepr\\PartBundle\\Entity\\Part' . "\0" . 'stockLevel', '' . "\0" . 'PartKeepr\\PartBundle\\Entity\\Part' . "\0" . 'minStockLevel', '' . "\0" . 'PartKeepr\\PartBundle\\Entity\\Part' . "\0" . 'averagePrice', '' . "\0" . 'PartKeepr\\PartBundle\\Entity\\Part' . "\0" . 'stockLevels', '' . "\0" . 'PartKeepr\\PartBundle\\Entity\\Part' . "\0" . 'parameters', '' . "\0" . 'PartKeepr\\PartBundle\\Entity\\Part' . "\0" . 'metaPartParameterCriterias', '' . "\0" . 'PartKeepr\\PartBundle\\Entity\\Part' . "\0" . 'status', '' . "\0" . 'PartKeepr\\PartBundle\\Entity\\Part' . "\0" . 'needsReview', '' . "\0" . 'PartKeepr\\PartBundle\\Entity\\Part' . "\0" . 'partCondition', '' . "\0" . 'PartKeepr\\PartBundle\\Entity\\Part' . "\0" . 'productionRemarks', '' . "\0" . 'PartKeepr\\PartBundle\\Entity\\Part' . "\0" . 'createDate', '' . "\0" . 'PartKeepr\\PartBundle\\Entity\\Part' . "\0" . 'projectParts', '' . "\0" . 'PartKeepr\\PartBundle\\Entity\\Part' . "\0" . 'internalPartNumber', '' . "\0" . 'PartKeepr\\PartBundle\\Entity\\Part' . "\0" . 'removals', '' . "\0" . 'PartKeepr\\PartBundle\\Entity\\Part' . "\0" . 'lowStock', '' . "\0" . 'PartKeepr\\PartBundle\\Entity\\Part' . "\0" . 'metaPart', '' . "\0" . 'PartKeepr\\PartBundle\\Entity\\Part' . "\0" . 'metaPartMatches'];
        }

        return ['__isInitialized__', '' . "\0" . 'PartKeepr\\PartBundle\\Entity\\Part' . "\0" . 'category', '' . "\0" . 'PartKeepr\\PartBundle\\Entity\\Part' . "\0" . 'name', '' . "\0" . 'PartKeepr\\PartBundle\\Entity\\Part' . "\0" . 'description', '' . "\0" . 'PartKeepr\\PartBundle\\Entity\\Part' . "\0" . 'footprint', '' . "\0" . 'PartKeepr\\PartBundle\\Entity\\Part' . "\0" . 'partUnit', '' . "\0" . 'PartKeepr\\PartBundle\\Entity\\Part' . "\0" . 'storageLocation', '' . "\0" . 'PartKeepr\\PartBundle\\Entity\\Part' . "\0" . 'manufacturers', '' . "\0" . 'PartKeepr\\PartBundle\\Entity\\Part' . "\0" . 'distributors', '' . "\0" . 'PartKeepr\\PartBundle\\Entity\\Part' . "\0" . 'attachments', '' . "\0" . 'PartKeepr\\PartBundle\\Entity\\Part' . "\0" . 'comment', '' . "\0" . 'PartKeepr\\PartBundle\\Entity\\Part' . "\0" . 'stockLevel', '' . "\0" . 'PartKeepr\\PartBundle\\Entity\\Part' . "\0" . 'minStockLevel', '' . "\0" . 'PartKeepr\\PartBundle\\Entity\\Part' . "\0" . 'averagePrice', '' . "\0" . 'PartKeepr\\PartBundle\\Entity\\Part' . "\0" . 'stockLevels', '' . "\0" . 'PartKeepr\\PartBundle\\Entity\\Part' . "\0" . 'parameters', '' . "\0" . 'PartKeepr\\PartBundle\\Entity\\Part' . "\0" . 'metaPartParameterCriterias', '' . "\0" . 'PartKeepr\\PartBundle\\Entity\\Part' . "\0" . 'status', '' . "\0" . 'PartKeepr\\PartBundle\\Entity\\Part' . "\0" . 'needsReview', '' . "\0" . 'PartKeepr\\PartBundle\\Entity\\Part' . "\0" . 'partCondition', '' . "\0" . 'PartKeepr\\PartBundle\\Entity\\Part' . "\0" . 'productionRemarks', '' . "\0" . 'PartKeepr\\PartBundle\\Entity\\Part' . "\0" . 'createDate', '' . "\0" . 'PartKeepr\\PartBundle\\Entity\\Part' . "\0" . 'projectParts', '' . "\0" . 'PartKeepr\\PartBundle\\Entity\\Part' . "\0" . 'internalPartNumber', '' . "\0" . 'PartKeepr\\PartBundle\\Entity\\Part' . "\0" . 'removals', '' . "\0" . 'PartKeepr\\PartBundle\\Entity\\Part' . "\0" . 'lowStock', '' . "\0" . 'PartKeepr\\PartBundle\\Entity\\Part' . "\0" . 'metaPart', '' . "\0" . 'PartKeepr\\PartBundle\\Entity\\Part' . "\0" . 'metaPartMatches'];
    }

    /**
     * 
     */
    public function __wakeup()
    {
        if ( ! $this->__isInitialized__) {
            $this->__initializer__ = function (Part $proxy) {
                $proxy->__setInitializer(null);
                $proxy->__setCloner(null);

                $existingProperties = get_object_vars($proxy);

                foreach ($proxy->__getLazyProperties() as $property => $defaultValue) {
                    if ( ! array_key_exists($property, $existingProperties)) {
                        $proxy->$property = $defaultValue;
                    }
                }
            };

        }
    }

    /**
     * 
     */
    public function __clone()
    {
        $this->__cloner__ && $this->__cloner__->__invoke($this, '__clone', []);
    }

    /**
     * Forces initialization of the proxy
     */
    public function __load()
    {
        $this->__initializer__ && $this->__initializer__->__invoke($this, '__load', []);
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __isInitialized()
    {
        return $this->__isInitialized__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitialized($initialized)
    {
        $this->__isInitialized__ = $initialized;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitializer(\Closure $initializer = null)
    {
        $this->__initializer__ = $initializer;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __getInitializer()
    {
        return $this->__initializer__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setCloner(\Closure $cloner = null)
    {
        $this->__cloner__ = $cloner;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific cloning logic
     */
    public function __getCloner()
    {
        return $this->__cloner__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     * @static
     */
    public function __getLazyProperties()
    {
        return self::$lazyPropertiesDefaults;
    }

    
    /**
     * {@inheritDoc}
     */
    public function getProductionRemarks()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getProductionRemarks', []);

        return parent::getProductionRemarks();
    }

    /**
     * {@inheritDoc}
     */
    public function setProductionRemarks($productionRemarks)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setProductionRemarks', [$productionRemarks]);

        return parent::setProductionRemarks($productionRemarks);
    }

    /**
     * {@inheritDoc}
     */
    public function getMetaPartMatches()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getMetaPartMatches', []);

        return parent::getMetaPartMatches();
    }

    /**
     * {@inheritDoc}
     */
    public function setMetaPartMatches($metaPartMatches)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setMetaPartMatches', [$metaPartMatches]);

        return parent::setMetaPartMatches($metaPartMatches);
    }

    /**
     * {@inheritDoc}
     */
    public function isLowStock()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'isLowStock', []);

        return parent::isLowStock();
    }

    /**
     * {@inheritDoc}
     */
    public function setLowStock($lowStock)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setLowStock', [$lowStock]);

        return parent::setLowStock($lowStock);
    }

    /**
     * {@inheritDoc}
     */
    public function hasRemovals()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'hasRemovals', []);

        return parent::hasRemovals();
    }

    /**
     * {@inheritDoc}
     */
    public function getName()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getName', []);

        return parent::getName();
    }

    /**
     * {@inheritDoc}
     */
    public function setName($name)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setName', [$name]);

        return parent::setName($name);
    }

    /**
     * {@inheritDoc}
     */
    public function getInternalPartNumber()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getInternalPartNumber', []);

        return parent::getInternalPartNumber();
    }

    /**
     * {@inheritDoc}
     */
    public function setInternalPartNumber($partNumber)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setInternalPartNumber', [$partNumber]);

        return parent::setInternalPartNumber($partNumber);
    }

    /**
     * {@inheritDoc}
     */
    public function getDescription()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getDescription', []);

        return parent::getDescription();
    }

    /**
     * {@inheritDoc}
     */
    public function setDescription($description)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setDescription', [$description]);

        return parent::setDescription($description);
    }

    /**
     * {@inheritDoc}
     */
    public function getPartUnit()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getPartUnit', []);

        return parent::getPartUnit();
    }

    /**
     * {@inheritDoc}
     */
    public function setPartUnit(\PartKeepr\PartBundle\Entity\PartMeasurementUnit $partUnit = NULL)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setPartUnit', [$partUnit]);

        return parent::setPartUnit($partUnit);
    }

    /**
     * {@inheritDoc}
     */
    public function getNeedsReview()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getNeedsReview', []);

        return parent::getNeedsReview();
    }

    /**
     * {@inheritDoc}
     */
    public function setNeedsReview($bReview)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setNeedsReview', [$bReview]);

        return parent::setNeedsReview($bReview);
    }

    /**
     * {@inheritDoc}
     */
    public function getPartCondition()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getPartCondition', []);

        return parent::getPartCondition();
    }

    /**
     * {@inheritDoc}
     */
    public function setPartCondition($partCondition)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setPartCondition', [$partCondition]);

        return parent::setPartCondition($partCondition);
    }

    /**
     * {@inheritDoc}
     */
    public function getCategoryPath()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getCategoryPath', []);

        return parent::getCategoryPath();
    }

    /**
     * {@inheritDoc}
     */
    public function getFootprint()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getFootprint', []);

        return parent::getFootprint();
    }

    /**
     * {@inheritDoc}
     */
    public function setFootprint(\PartKeepr\FootprintBundle\Entity\Footprint $footprint = NULL)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setFootprint', [$footprint]);

        return parent::setFootprint($footprint);
    }

    /**
     * {@inheritDoc}
     */
    public function getComment()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getComment', []);

        return parent::getComment();
    }

    /**
     * {@inheritDoc}
     */
    public function setComment($comment)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setComment', [$comment]);

        return parent::setComment($comment);
    }

    /**
     * {@inheritDoc}
     */
    public function getDistributors()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getDistributors', []);

        return parent::getDistributors();
    }

    /**
     * {@inheritDoc}
     */
    public function getAttachments()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getAttachments', []);

        return parent::getAttachments();
    }

    /**
     * {@inheritDoc}
     */
    public function getManufacturers()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getManufacturers', []);

        return parent::getManufacturers();
    }

    /**
     * {@inheritDoc}
     */
    public function getParameters()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getParameters', []);

        return parent::getParameters();
    }

    /**
     * {@inheritDoc}
     */
    public function getMetaPartParameterCriterias()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getMetaPartParameterCriterias', []);

        return parent::getMetaPartParameterCriterias();
    }

    /**
     * {@inheritDoc}
     */
    public function getCreateDate()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getCreateDate', []);

        return parent::getCreateDate();
    }

    /**
     * {@inheritDoc}
     */
    public function getStatus()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getStatus', []);

        return parent::getStatus();
    }

    /**
     * {@inheritDoc}
     */
    public function setStatus($status)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setStatus', [$status]);

        return parent::setStatus($status);
    }

    /**
     * {@inheritDoc}
     */
    public function onPrePersist()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'onPrePersist', []);

        return parent::onPrePersist();
    }

    /**
     * {@inheritDoc}
     */
    public function executeSaveListener()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'executeSaveListener', []);

        return parent::executeSaveListener();
    }

    /**
     * {@inheritDoc}
     */
    public function getCategory()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getCategory', []);

        return parent::getCategory();
    }

    /**
     * {@inheritDoc}
     */
    public function setCategory($category)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setCategory', [$category]);

        return parent::setCategory($category);
    }

    /**
     * {@inheritDoc}
     */
    public function getStorageLocation()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getStorageLocation', []);

        return parent::getStorageLocation();
    }

    /**
     * {@inheritDoc}
     */
    public function setStorageLocation(\PartKeepr\StorageLocationBundle\Entity\StorageLocation $storageLocation = NULL)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setStorageLocation', [$storageLocation]);

        return parent::setStorageLocation($storageLocation);
    }

    /**
     * {@inheritDoc}
     */
    public function isMetaPart()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'isMetaPart', []);

        return parent::isMetaPart();
    }

    /**
     * {@inheritDoc}
     */
    public function setMetaPart($metaPart)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setMetaPart', [$metaPart]);

        return parent::setMetaPart($metaPart);
    }

    /**
     * {@inheritDoc}
     */
    public function setRemovals($removals = false)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setRemovals', [$removals]);

        return parent::setRemovals($removals);
    }

    /**
     * {@inheritDoc}
     */
    public function getAveragePrice()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getAveragePrice', []);

        return parent::getAveragePrice();
    }

    /**
     * {@inheritDoc}
     */
    public function setAveragePrice($price)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setAveragePrice', [$price]);

        return parent::setAveragePrice($price);
    }

    /**
     * {@inheritDoc}
     */
    public function onPreUpdate()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'onPreUpdate', []);

        return parent::onPreUpdate();
    }

    /**
     * {@inheritDoc}
     */
    public function addStockLevel(\PartKeepr\StockBundle\Entity\StockEntry $stockEntry)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'addStockLevel', [$stockEntry]);

        return parent::addStockLevel($stockEntry);
    }

    /**
     * {@inheritDoc}
     */
    public function removeStockLevel($stockEntry)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'removeStockLevel', [$stockEntry]);

        return parent::removeStockLevel($stockEntry);
    }

    /**
     * {@inheritDoc}
     */
    public function addParameter($partParameter)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'addParameter', [$partParameter]);

        return parent::addParameter($partParameter);
    }

    /**
     * {@inheritDoc}
     */
    public function removeParameter($partParameter)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'removeParameter', [$partParameter]);

        return parent::removeParameter($partParameter);
    }

    /**
     * {@inheritDoc}
     */
    public function addMetaPartParameterCriteria($metaPartParameterCriteria)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'addMetaPartParameterCriteria', [$metaPartParameterCriteria]);

        return parent::addMetaPartParameterCriteria($metaPartParameterCriteria);
    }

    /**
     * {@inheritDoc}
     */
    public function removeMetaPartParameterCriteria($metaPartParameterCriteria)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'removeMetaPartParameterCriteria', [$metaPartParameterCriteria]);

        return parent::removeMetaPartParameterCriteria($metaPartParameterCriteria);
    }

    /**
     * {@inheritDoc}
     */
    public function addAttachment($partAttachment)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'addAttachment', [$partAttachment]);

        return parent::addAttachment($partAttachment);
    }

    /**
     * {@inheritDoc}
     */
    public function removeAttachment($partAttachment)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'removeAttachment', [$partAttachment]);

        return parent::removeAttachment($partAttachment);
    }

    /**
     * {@inheritDoc}
     */
    public function addManufacturer(\PartKeepr\PartBundle\Entity\PartManufacturer $partManufacturer)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'addManufacturer', [$partManufacturer]);

        return parent::addManufacturer($partManufacturer);
    }

    /**
     * {@inheritDoc}
     */
    public function removeManufacturer(\PartKeepr\PartBundle\Entity\PartManufacturer $partManufacturer)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'removeManufacturer', [$partManufacturer]);

        return parent::removeManufacturer($partManufacturer);
    }

    /**
     * {@inheritDoc}
     */
    public function addDistributor(\PartKeepr\PartBundle\Entity\PartDistributor $partDistributor)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'addDistributor', [$partDistributor]);

        return parent::addDistributor($partDistributor);
    }

    /**
     * {@inheritDoc}
     */
    public function removeDistributor(\PartKeepr\PartBundle\Entity\PartDistributor $partDistributor)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'removeDistributor', [$partDistributor]);

        return parent::removeDistributor($partDistributor);
    }

    /**
     * {@inheritDoc}
     */
    public function getProjectParts()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getProjectParts', []);

        return parent::getProjectParts();
    }

    /**
     * {@inheritDoc}
     */
    public function getProjectNames()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getProjectNames', []);

        return parent::getProjectNames();
    }

    /**
     * {@inheritDoc}
     */
    public function recomputeStockLevels()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'recomputeStockLevels', []);

        return parent::recomputeStockLevels();
    }

    /**
     * {@inheritDoc}
     */
    public function getStockLevels()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getStockLevels', []);

        return parent::getStockLevels();
    }

    /**
     * {@inheritDoc}
     */
    public function getMinStockLevel()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getMinStockLevel', []);

        return parent::getMinStockLevel();
    }

    /**
     * {@inheritDoc}
     */
    public function setMinStockLevel($minStockLevel)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setMinStockLevel', [$minStockLevel]);

        return parent::setMinStockLevel($minStockLevel);
    }

    /**
     * {@inheritDoc}
     */
    public function getStockLevel()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getStockLevel', []);

        return parent::getStockLevel();
    }

    /**
     * {@inheritDoc}
     */
    public function setStockLevel($stockLevel)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setStockLevel', [$stockLevel]);

        return parent::setStockLevel($stockLevel);
    }

    /**
     * {@inheritDoc}
     */
    public function getId()
    {
        if ($this->__isInitialized__ === false) {
            return (int)  parent::getId();
        }


        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getId', []);

        return parent::getId();
    }

    /**
     * {@inheritDoc}
     */
    public function __toString()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, '__toString', []);

        return parent::__toString();
    }

}
